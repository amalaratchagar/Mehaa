@using Core.Entities.User
@model UserPermission
@inject Core.Interfaces.ILookupRepositoryAsync lookupRepositoryAsync

<form id="create-form" method="post" asp-page="Index" asp-route-id="@Model.Id" asp-page-handler="CreateOrEdit" onsubmit="return jQueryModalPost(this);">

    <div class="form-group row">
        <label class="col-md-3 col-form-label">Category</label>
        <div class="col-md-9">
            @Html.DropDownListFor(x => Model.UserId, lookupRepositoryAsync.GetUsers().Select(x => new SelectListItem { Text = x.Name, Value = x.Id.ToString() }), htmlAttributes: new { @class = "form-control", name = "UserId" })
            @Html.ValidationMessageFor(x => Model.UserId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        <label class="col-md-3 col-form-label">Category</label>
        <div class="col-md-9">
            @Html.DropDownListFor(x => Model.PermisssionId, lookupRepositoryAsync.GetPermissions().Select(x => new SelectListItem { Text = x.Name, Value = x.Id.ToString() }), htmlAttributes: new { @class = "form-control", name = "PermisssionId" })
            @Html.ValidationMessageFor(x => Model.PermisssionId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        <div class="col-md-3">
        </div>
    </div>
    <div class="form-group justify-content-between">
        <button type="button" class="btn btn-secondary close-button" data-dismiss="modal">Cancel</button>
        <button type="submit" class="btn btn-primary save-button">Save</button>
    </div>

</form>
<script type="text/javascript" language=javascript>
    $.validator.unobtrusive.parse(document);
</script>